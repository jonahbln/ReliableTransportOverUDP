#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, sys

DATA_SIZE = 1375

class Sender:
    def __init__(self, host, port):
        self.host = host
        self.port = int(port)
        self.log("Sender starting up using port %s" % self.port)
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))

        self.packetsAwaitingResponse = []
        # dictionary to track recieved ACKs
        self.ack_count = {} 

        # Window Size, Slow Start Threshold, and congestion control variables
        self.windowSize = 2  
        self.ssthresh = 16
        self.cwnd = 2 

        # RTT and bandwidth tracking
        self.rtt = 1.0
        self.rttArray = []
        self.bandwidthArray = []

        self.remote_host = None
        self.remote_port = None

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def send(self, message):
        self.log("Sending message '%s'" % json.dumps(message))
        self.socket.sendto(json.dumps(message).encode("utf-8"), (self.host, self.port))

    def recv(self, socket):
        data, addr = socket.recvfrom(65535)

        # Grab the remote host/port if we don't already have it
        if self.remote_host is None:
            self.remote_host = addr[0]
            self.remote_port = addr[1]

        # Make sure we're talking to the same remote host
        if addr != (self.remote_host, self.remote_port):
            self.log("Error: Received response from unexpected remote; ignoring")
            return None
        else:
            self.log("Received message %s" % data)
            return json.loads(data.decode("utf-8"))

    def run(self):
        seq = 0
        while True:
            # Check for packets that have timed out
            self.resendLostPackets()

            # Send data if window permits
            if len(self.packetsAwaitingResponse) < self.windowSize:
                socks = select.select([sys.stdin], [], [], 0.1)[0]
                for conn in socks:
                    data = sys.stdin.read(DATA_SIZE)
                    if len(data) == 0:
                        # only quit out if no packets are left unacknoledged
                        if len(self.packetsAwaitingResponse) == 0:
                            self.log("All done!")
                            sys.exit(0)
                        else:
                            continue

                    msg = {"type": "msg", "data": data, "seq": seq}
                    self.send(msg)
                    # send packet and add it to the unacknoledged list
                    self.packetsAwaitingResponse.append((msg, time.time()))
                    seq += 1

            # Check for incoming ACKs
            socks = select.select([self.socket], [], [], 0.1)[0]
            for conn in socks:
                data = self.recv(conn)

                if data:
                    # Handle ACKs
                    if data["type"] == "ack":
                        ack_seq = data["seq"]
                        ack_time = time.time()
                        self.log(f"Received ACK for packet {ack_seq}")

                        # Track the count of each ACK
                        if ack_seq in self.ack_count:
                            self.ack_count[ack_seq] += 1
                        else:
                            self.ack_count[ack_seq] = 1

                        # Check for 3 duplicate ACKs
                        if self.ack_count[ack_seq] == 3:
                            self.cwnd = max(1, self.cwnd // 2)  # Halve the window size directly
                            self.windowSize = self.cwnd
                            continue

                        found = False
                        # Update congestion control parameters
                        for packet in self.packetsAwaitingResponse:
                            if packet[0]['seq'] == ack_seq:
                                found = True
                                rtt_sample = ack_time - packet[1]

                                # **RTT Calculation** using weighted average (Karnâ€™s algorithm)
                                self.rtt = (0.85 * rtt_sample) + (0.15 * self.rtt)

                                # Track RTT and bandwidth samples
                               # self.rttArray = (self.rttArray + [self.rtt])[-10:]
                               # bandwidth_sample = DATA_SIZE / rtt_sample
                               # self.bandwidthArray = (self.bandwidthArray + [bandwidth_sample])[-10:]
                                # **Calculate bottleneck bandwidth and RTprop**
                                #bottleNeckBandwidth = max(self.bandwidthArray)
                                #rtProp = min(self.rttArray)
                               # BDP = bottleNeckBandwidth * rtProp  # Bandwidth-Delay Product

                                # **Window size adjustment based on bandwidth and RTT**
                                if self.cwnd < self.ssthresh:
                                    # Slow start phase 
                                    self.cwnd += 1
                                else:
                                    # Congestion avoidance phase (linear growth)
                                    self.cwnd += 1 / self.cwnd

                               # Limit cwnd to 2 * BDP
                               # self.cwnd = min(self.cwnd, 2 * BDP)

                                self.windowSize = int(self.cwnd)
                                self.packetsAwaitingResponse.remove(packet)
                                break

        return
    
    def resendLostPackets(self):
        # Retransmit packets that have timed out
        for i, packet in enumerate(self.packetsAwaitingResponse):
            if time.time() - packet[1] > (self.rtt * 2): # check if a packet has been unacknoledged for more than 2 x rtt
                self.cwnd = max(1, self.cwnd // 2)  
                self.windowSize = self.cwnd
                y = list(packet)
                y[1] = time.time() # update the time that the pakcet was sent out
                newPacket = tuple(y)
                self.packetsAwaitingResponse[i] = newPacket
                # resend the packet
                self.send(newPacket[0])
        return

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='send data')
    parser.add_argument('host', type=str, help="Remote host to connect to")
    parser.add_argument('port', type=int, help="UDP port number to connect to")
    args = parser.parse_args()
    sender = Sender(args.host, args.port)
    sender.run()
